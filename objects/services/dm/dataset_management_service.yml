name: dataset_management

docstring: |
   The Dataset Management Service provides the services to register and manipulate changeable data sets and their
   metadata within the Integrated Observatory

spec: https://confluence.oceanobservatories.org/display/syseng/CIAD+DM+OV+Dataset+Management+Service

dependencies: [resource_registry, ingestion_management]

methods:
  create_dataset:
    docstring: |
      @brief Create a resource which defines a dataset. For LCA it is assumed that datasets are organized by stream.
      @param stream_id is the primary key used in the couch view to retrieve the content or metadata
      @param datastore_name is the name of the datastore where this dataset resides.
      @param view_name is the name of the view which joins the dataset definition to the dataset
      @param contact is the contact information for the dataset adminstrator
      @param user_metadata is user defined metadata which can be added to this dataset. Should be annotation via association
      @param name is the name of the dataset resource
      @param description is a description of the dataset resource
    in:
      stream_id: ""
      datastore_name: ""
      view_name: ""
      name: ""
      description: ""
      contact: !ContactInformation
      user_metadata: {}
    out:
      dataset_id: ""

  update_dataset:
    in:
      dataset: !DataSet
    out:

  read_dataset:
    # Read the dataset resource including metadata
    in:
      dataset_id: ""
    out:
      dataset: !DataSet
    throws:
      NotFound: if ingestion configuration did not exist

  delete_dataset:
    in:
      dataset_id: ""
    out:
    throws:
      NotFound: if ingestion configuration did not exist

  get_dataset_bounds:
    docstring: |
        @brief Get the bounding coordinates of the dataset using a couch map/reduce query
        @param dataset_id
        @result bounds is a dictionary containing spatial and temporal bounds of the dataset in standard units
    in:
      dataset_id: ""
    out:
      bounds: {} # {geo: [latmin, lonmin, latmax, lonmax], height:[min, max], time:[min, max]}

  get_dataset_metadata:
    docstring: |
      @brief Get the metadata for the dataset using a couch map/reduce query
      @param dataset_id
      @result the aggregated available metadata for the specified dataset
    in:
      dataset_id: ""
    out:
      metadata: {} # structure tbd... similar to datastream definition

  #-------------------------
  # Not implemented yet


  find_datasets:
    in:
      filters: !ResourceFilter
    out:
      dataset_list: []
