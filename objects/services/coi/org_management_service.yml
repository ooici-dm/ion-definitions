name: org_management

docstring: |
  Services to define and administer a facility (synonymous Org, community), to enroll/remove members and
  to provide access to the resources of an Org to enrolled or affiliated entities (identities). Contains
  contract and commitment repository

spec: https://confluence.oceanobservatories.org/display/syseng/CIAD+COI+OV+Org+Management+Service

dependencies: [policy_management,resource_registry]

methods:
  create_org:
    docstring: |
      Creates an Org based on the provided object. The id string returned
      is the internal id by which Org will be identified in the data store.
    in:
      org: !Org
    out:
      org_id: ""
    throws:
      BadRequest: if object passed has _id or _rev attribute

  update_org:
    docstring: |
      Updates the Org based on provided object.
    in:
      org: !Org
    out:
    throws:
      BadRequest: if object does not have _id or _rev attribute
      NotFound: object with specified id does not exist
      Conflict: object not based on latest persisted object version

  read_org:
    docstring: |
      Returns the Org object for the specified id.
      Throws exception if id does not match any persisted Org
      objects.
    in:
      org_id: ""
    out:
      org: !Org
    throws:
      NotFound: object with specified id does not exist

  delete_org:
    docstring: |
      Permanently deletes Org object with the specified
      id. Throws exception if id does not match any persisted Org object.
    in:
      org_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist


  find_org:
    docstring: |
      Returns the Org object for the specified name.
      Throws exception if name does not match any persisted Org
      objects.
    in:
      name: ""
    out:
      org: !Org
    throws:
      NotFound: object with specified name does not exist


  # -----------------

  add_user_role:
    docstring: |
       Adds a UserRole to an Org. Will call Policy Management Service to actually
       create the role object that is passed in, if the role by the specified
       name does not exist. Throws exception if either id does not exist.
    in:
      org_id: ""
      user_role: !UserRole
    out:
      user_role_id: ""
    throws:
      NotFound: object with specified name does not exist

  remove_user_role:
    docstring: |
       Removes a UserRole from an Org. The UserRole will not be removed if there are
       users associated with the UserRole unless the force_removal paramater is set to True
       Throws exception if either id does not exist.
    in:
      org_id: ""
      name: ""
      force_removal: False
    out:
      success: True
    throws:
      NotFound: object with specified name does not exist

  find_org_role_by_name:
    docstring: |
      Returns the User Role object for the specified name in the Org.
      Throws exception if name does not match any persisted User Role or the Org does not exist.
      objects.
    in:
      org_id: ""
      name: ""
    out:
      user_role: !UserRole
    throws:
      NotFound: object with specified name or if does not exist

  find_org_roles:
    docstring: |
      Returns a list of roles available in an Org. Will throw a not NotFound exception
      if none of the specified ids do not exist.
    in:
      org_id: ""
    out:
      user_role_list: []
    throws:
      NotFound: object with specified id does not exist

  # -----------------


  request_enroll:
    docstring: |
      Requests for an enrollment with an Org which must be accepted or denied as a separate process.
      Membership in the ION Org is implied by registration with the system, so a membership
      association to the ION Org is not maintained. Throws a NotFound exception if neither id is found.
    in:
      org_id: ""
      user_id: ""
    out:
      request_id: ""
    throws:
      NotFound: object with specified id does not exist

  request_role:
    docstring: |
      Requests for an role within an Org which must be accepted or denied as a separate process.
      A role of Member is automatically implied with successfull enrollment.  Throws a
      NotFound exception if neither id is found.
    in:
      org_id: ""
      user_id: ""
      role_name: ""
    out:
      request_id: ""
    throws:
      NotFound: object with specified id does not exist

  request_acquire_resource:
    docstring: |
      Requests to acquire a resource within an Org which must be accepted or denied as a separate process.
      Throws a NotFound exception if neither id is found.
    in:
      org_id: ""
      user_id: ""
      resource_id: ""
    out:
      request_id: ""
    throws:
      NotFound: object with specified id does not exist



  find_requests:
    docstring: |
      Returns a list of open requests for an Org. An optional request_type can be supplied
      or else all types will be returned. An optional request_status can be supplied
      or else requests will be returned. Will throw a not NotFound exception
      if none of the specified ids do not exist.
    in:
      org_id: ""
      request_type: ""
      request_status: ""
    out:
      requests: []
    throws:
      NotFound: object with specified id does not exist

  approve_request:
    docstring: |
      Approves a request made to an Org.  Will throw a not NotFound exception
      if none of the specified ids do not exist.
    in:
      org_id: ""
      request_id: ""
    out:
      success: True
    throws:
      NotFound: object with specified id does not exist

  deny_request:
    docstring: |
      Denys a request made to an Org. An optional reason can be recorded with the denial.
      Will throw a not NotFound exception if none of the specified ids do not exist.
    in:
      org_id: ""
      request_id: ""
      reason: ""
    out:
      success: True
    throws:
      NotFound: object with specified id does not exist

  find_user_requests:
    docstring: |
      Returns a list of requests for a specified User. All requests for all Orgs will be returned
      unless an org_id is specified. An optional request_type can be supplied
      or else all types will be returned. An optional request_status can be supplied
      or else requests will be returned. Will throw a not NotFound exception
      if none of the specified ids do not exist.
    in:
      user_id: ""
      org_id: ""
      request_type: ""
      request_status: ""
    out:
      requests: []
    throws:
      NotFound: object with specified id does not exist

  accept_request:
    docstring: |
      Accepts and invitation for a request made to an Org.  Will throw a not NotFound exception
      if none of the specified ids do not exist.
    in:
      org_id: ""
      request_id: ""
    out:
      success: True
    throws:
      NotFound: object with specified id does not exist

  reject_request:
    docstring: |
      Rejects an invitation made to an Org. An optional reason can be recorded with the rejection.
      Will throw a not NotFound exception if none of the specified ids do not exist.
    in:
      org_id: ""
      request_id: ""
      reason: ""
    out:
      success: True
    throws:
      NotFound: object with specified id does not exist

  # -----------------

  enroll_member:
    docstring: |
      Enrolls a specified user into the specified Org so that they may find and negotiate to use resources
      of the Org. Membership in the ION Org is implied by registration with the system, so a membership
      association to the ION Org is not maintained. Throws a NotFound exception if neither id is found.
    in:
      org_id: ""
      user_id: ""
    out:
      success: True
    throws:
      NotFound: object with specified id does not exist

  cancel_member_enrollment:
    docstring: |
      Cancels the membership of a specifid user within the specified Org. Once canceled, the user will no longer
      have access to the resource of that Org. Throws a NotFound exception if neither id is found.
    in:
      org_id: ""
      user_id: ""
    out:
      success: True
    throws:
      NotFound: object with specified id does not exist

  is_enrolled:
    docstring: |
      Returns True if the specified user_id is enrolled in the Org and False if not.
      Throws a NotFound exception if neither id is found.
    in:
      org_id: ""
      user_id: ""
    out:
      is_enrolled: False
    throws:
      NotFound: object with specified id does not exist

  find_enrolled_users:
    docstring: |
      Returns a list of users enrolled in an Org. Will throw a not NotFound exception
      if none of the specified ids do not exist.
    in:
      org_id: ""
    out:
      user_list: []
    throws:
      NotFound: object with specified id does not exist

  find_enrolled_orgs:
    docstring: |
      Returns a list of Orgs that the user is enrolled in. Will throw a not NotFound exception
      if none of the specified ids do not exist.
    in:
      user_id: ""
    out:
      org_list: []
    throws:
      NotFound: object with specified id does not exist

  # -----------------

  grant_role:
    docstring: |
      Grants a defined role within an organization to a specific user. A role of Member is
      automatically implied with successfull enrollment. Will throw a not NotFound exception
      if none of the specified ids or role_name does not exist.
    in:
      org_id: ""
      user_id: ""
      role_name: ""
      scope: !RoleScope
    out:
      success: True
    throws:
      NotFound: object with specified id does not exist

  revoke_role:
    docstring: |
      Revokes a defined Role within an organization to a specific user. Will throw a not NotFound exception
      if none of the specified ids or role_name does not exist.
    in:
      org_id: ""
      user_id: ""
      role_name: ""
    out:
      success: True
    throws:
      NotFound: object with specified id does not exist

  find_roles_by_user:
    docstring: |
      Returns a list of User Roles for a specific user in an Org.
      Will throw a not NotFound exception if either of the IDs do not exist.
    in:
      org_id: ""
      user_id: ""
    out:
      user_role_list: []
    throws:
      NotFound: object with specified id does not exist


  find_all_roles_by_user:
    docstring: |
      Returns a list of all User Roles roles by Org associated with the specified user.
      Will throw a not NotFound exception if either of the IDs do not exist.
    in:
      user_id: ""
    out:
      user_roles_by_org: {}
    throws:
      NotFound: object with specified id does not exist



  # -----------------

  has_permission:
    docstring: |
      Returns a boolean of the specified user has permission for the specified action on a specified resource. Will
      throw a NotFound exception if none of the specified ids do not exist.
    in:
      org_id: ""
      user_id: ""
      action_id: ""
      resource_id: ""
    out:
      has_permission: False
    throws:
      NotFound: object with specified id does not exist



  # ---------------------------


  share_resource:
    docstring: |
      Share a specified resource with the specified Org. Once shared, the resource will be added to a directory
      of available resources within the Org. Throws a NotFound exception if neither id is found.
    in:
      org_id: ""
      resource_id: ""
    out:
      success: True
    throws:
      NotFound: object with specified id does not exist

  unshare_resource:
    docstring: |
      Unshare a specified resource with the specified Org. Once unshared, the resource will be removed from a directory
      of available resources within the Org. Throws a NotFound exception if neither id is found.
    in:
      org_id: ""
      resource_id: ""
    out:
      success: True
    throws:
      NotFound: object with specified id does not exist


  acquire_resource:
    docstring: |
      Acquire the specified resource for a specified user withing the specified Org. Once shared, the resource is
      committed to the user. Throws a NotFound exception if none of the ids are found.
    in:
      org_id: ""
      user_id: ""
      resource_id: ""
    out:
      success: True
    throws:
      NotFound: object with specified id does not exist

  release_resource:
    docstring: |
      Release the specified resource from an existing commitment. Throws a NotFound exception if none of the ids are found.
    in:
      org_id: ""
      user_id: ""
      resource_id: ""
    out:
      success: True
    throws:
      NotFound: object with specified id does not exist


  # -----------------

  affiliate_org:
    docstring: |
      Creates an association between multiple Orgs as an affiliation
      so that they may coordinate activities between them.
      Throws a NotFound exception if neither id is found.
    in:
      org_id: ""
      affiliate_org_id: ""
    out:
      success: True
    throws:
      NotFound: object with specified id does not exist

  unaffiliate_org:
    docstring: |
      Removes an association between multiple Orgs as an affiliation.
      Throws a NotFound exception if neither id is found.
    in:
      org_id: ""
      affiliate_org_id: ""
    out:
      success: True
    throws:
      NotFound: object with specified id does not exist

